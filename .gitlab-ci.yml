stages:
  - test
  - build
  - package
  - release

variables:
  BACKEND_CONTAINER_IMAGE: registry.gitlab.com/aymperes/ptut_eduprospect/backend:latest
  FRONTEND_CONTAINER_IMAGE: registry.gitlab.com/aymperes/ptut_eduprospect/frontend:latest
  BACKEND_RELEASE_IMAGE: registry.gitlab.com/aymperes/ptut_eduprospect/backend:$CI_COMMIT_TAG
  FRONTEND_RELEASE_IMAGE: registry.gitlab.com/aymperes/ptut_eduprospect/frontend:$CI_COMMIT_TAG

test-backend:
  stage: test
  image: maven:latest
  script:
    - cd backend
    - mvn test
  artifacts:
    when: always
    reports:
      junit:
        - backend/target/surefire-reports/TEST-*.xml
        - backend/target/failsafe-reports/TEST-*.xml
  rules:
    - changes:
        - backend/**/*
        - .gitlab-ci.yml

test-frontend:
  stage: test
  image: node:18-alpine
  script:
    - echo "Pas de tests pour le frontend"
  rules:
    - changes:
        - frontend/**/*
        - .gitlab-ci.yml

build-backend:
  stage: build
  image: maven:latest
  script:
    - cd backend
    - mvn package -DskipTests
  artifacts:
    paths:
      - backend/target/*.jar
  rules:
    - changes:
        - backend/**/*
        - .gitlab-ci.yml

build-frontend:
  stage: build
  image: node:18-alpine
  script:
    - cd frontend
    - node --version
    - npm --version
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist
  rules:
    - changes:
        - frontend/**/*
        - .gitlab-ci.yml

package-backend:
  stage: package
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd backend
    - docker build -t $BACKEND_CONTAINER_IMAGE .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $BACKEND_CONTAINER_IMAGE
  rules:
    - changes:
        - backend/**/*
        - .gitlab-ci.yml

package-frontend:
  stage: package
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd frontend
    - docker build -t $FRONTEND_CONTAINER_IMAGE .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $FRONTEND_CONTAINER_IMAGE
  rules:
    - changes:
        - frontend/**/*
        - .gitlab-ci.yml

release-backend:
  stage: release
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $BACKEND_CONTAINER_IMAGE
    - docker tag $BACKEND_CONTAINER_IMAGE $BACKEND_RELEASE_IMAGE
    - docker push $BACKEND_RELEASE_IMAGE
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "deploiement"

release-frontend:
  stage: release
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $FRONTEND_CONTAINER_IMAGE
    - docker tag $FRONTEND_CONTAINER_IMAGE $FRONTEND_RELEASE_IMAGE
    - docker push $FRONTEND_RELEASE_IMAGE
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "deploiement"

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "running release job"
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: '## Images des conteneurs<br/>- Backend: $BACKEND_RELEASE_IMAGE<br/>- Frontend: $FRONTEND_RELEASE_IMAGE'
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "deploiement"